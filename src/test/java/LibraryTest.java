import org.junit.Before;
import org.junit.Test;

import java.io.PrintStream;
import java.util.ArrayList;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'ptang' at '8/4/15 1:34 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/4/15 1:34 PM
 */
public class LibraryTest {
    private Library library;
    private ArrayList<Book> listOfBooks;
    @Before
    public void setup(){
        library = new Library();
    }

    @Test
    public void shouldProduceWelcomeWhenOpen() {
        assertThat(library.open(), is("Welcome to the Library! Biblioteca is available!"));
    }

    @Test
    public void shouldListNothingWhenLibraryCreatedWithNoBooks(){
        assertThat(library.listAllBooks(), is(""));
    }

    @Test
    public void shouldListAllBooksWhenLibraryCreatedWithBooks() {
        listOfBooks = new ArrayList<>();
        Book book1 = mock(Book.class);
        Book book2 = mock(Book.class);
        Book book3 = mock(Book.class);
        listOfBooks.add(book1);
        listOfBooks.add(book2);
        listOfBooks.add(book3);

        when(book1.toString()).thenReturn("Catch-22 | Joseph Heller | 1961");
        when(book2.toString()).thenReturn("Harry Potter and the Sorcerer's Stone | JK Rowling | 1997");
        when(book3.toString()).thenReturn("Notes from the Underground | Fyodor Dostoevsky | 1864");

        library = new Library(listOfBooks);
        assertThat(library.listAllBooks(), is("Catch-22 | Joseph Heller | 1961\n" +
                "Harry Potter and the Sorcerer's Stone | JK Rowling | 1997\n" +
                "Notes from the Underground | Fyodor Dostoevsky | 1864\n"));
    }

    @Test
    public void shouldListAllOptionsWhenListingOptions() {
        assertThat(library.listOptions(), is("(1) List Books"));
    }


    @Test
    public void shouldSelectCorrectOptionWhenUserChooses() {


    }

    @Test
    public void shouldListBooksWhenListBooksChoiceReceived() {
        listOfBooks = new ArrayList<>();
        Book book1 = mock(Book.class);
        Book book2 = mock(Book.class);
        listOfBooks.add(book1);
        listOfBooks.add(book2);

        when(book1.toString()).thenReturn("Book A");
        when(book2.toString()).thenReturn("Book B");

        library = new Library(listOfBooks);

        assertThat(library.getOption("1"), is("Book A\nBook B\n"));

    }

    @Test
    public void shouldProduceErrorMessageWhenInvalidChoiceEntered()  {
        assertThat(library.getOption("!!!!"), is("Select a valid option!"));

    }
}
